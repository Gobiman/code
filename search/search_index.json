{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Get-Service Get-Service","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Get-Service Get-Service","title":"Project layout"},{"location":"about/","text":"the cat sat on the mat again","title":"About"},{"location":"about/#the-cat-sat-on-the-mat-again","text":"","title":"the cat sat on the mat again"},{"location":"certificate/","text":"certificate SSL certificates are X.509 Certificates X.509 certificates are PKI-based certificates which works on the public key and private key infrastructure. certificates with extension .cer or .crt are the same. .cer and .cet extension are encoded in DER format or we can say they encoded with ASCII PEM format. DER formatted certificates are binary, therefore you can't see exactly what is written in those certificates you cannot as they are of the form 0s and 1s. Certificates that comes with .cer and .cet extensions are base 64 coded see openssl for certificate conversation MS, ADCS services training Configure windows certificate servers - setting up a CRL Configure Windows Certificate Services - Setting up a CRL it explains why and how to setup CRL (Certificate Revocation List) list of Technical Terminology and Disambiguation CRL = Certificate Revocation List: Is a list published by a CA for certificates that have been cancelled or revoked. OCSP protocol = Online Certificate Status Protocol: Used by a CA to answer certificate revocation requests. open cert manager for the local machine certlm Request, convert certificate & extract keys #list template from CA certutil -dump | sls 'config:' # dump CA config certutil -CATemplates -config <CA Enterprise machine> certutil -addstore -f \"ROOT\" new-root-certificate.crt certutil -delstore \"ROOT\" serial-number-hex In some remote access scenarios it is not possible to copy binary data (such as files) but you can copy\\transfer plain text, Base64 is a better choice. convert binary (pfx) file to Base64 (.cer) with powershell Get-PfxCertificate -FilePath F:\\Certs\\ServerCerts\\demosite.org.pfx | Export-Certificate -FilePath F:\\Certs\\ServerCerts\\demosite.cer -Type CERT convert Binary CER file to *.PEM file which is ASCII file certutil.exe -encode .\\demosite.cer demosite1.cer certutil -encode filename.cer newfilename.cer Convert from Base64 to Binary certutil -decode filename.cer newfilename.cer","title":"certificate"},{"location":"certificate/#certificate","text":"SSL certificates are X.509 Certificates X.509 certificates are PKI-based certificates which works on the public key and private key infrastructure. certificates with extension .cer or .crt are the same. .cer and .cet extension are encoded in DER format or we can say they encoded with ASCII PEM format. DER formatted certificates are binary, therefore you can't see exactly what is written in those certificates you cannot as they are of the form 0s and 1s. Certificates that comes with .cer and .cet extensions are base 64 coded see openssl for certificate conversation","title":"certificate"},{"location":"certificate/#ms-adcs-services-training","text":"","title":"MS, ADCS services training"},{"location":"certificate/#configure-windows-certificate-servers-setting-up-a-crl","text":"Configure Windows Certificate Services - Setting up a CRL it explains why and how to setup CRL (Certificate Revocation List)","title":"Configure windows certificate servers - setting up a CRL"},{"location":"certificate/#list-of-technical-terminology-and-disambiguation","text":"CRL = Certificate Revocation List: Is a list published by a CA for certificates that have been cancelled or revoked. OCSP protocol = Online Certificate Status Protocol: Used by a CA to answer certificate revocation requests.","title":"list of Technical Terminology and Disambiguation"},{"location":"certificate/#open-cert-manager-for-the-local-machine","text":"certlm","title":"open cert manager for the local machine"},{"location":"certificate/#request-convert-certificate-extract-keys","text":"#list template from CA certutil -dump | sls 'config:' # dump CA config certutil -CATemplates -config <CA Enterprise machine> certutil -addstore -f \"ROOT\" new-root-certificate.crt certutil -delstore \"ROOT\" serial-number-hex In some remote access scenarios it is not possible to copy binary data (such as files) but you can copy\\transfer plain text, Base64 is a better choice.","title":"Request, convert certificate &amp; extract keys"},{"location":"certificate/#convert-binary-pfx-file-to-base64-cer-with-powershell","text":"Get-PfxCertificate -FilePath F:\\Certs\\ServerCerts\\demosite.org.pfx | Export-Certificate -FilePath F:\\Certs\\ServerCerts\\demosite.cer -Type CERT","title":"convert binary (pfx) file to Base64 (.cer) with powershell"},{"location":"certificate/#convert-binary-cer-file-to-pem-file-which-is-ascii-file","text":"certutil.exe -encode .\\demosite.cer demosite1.cer certutil -encode filename.cer newfilename.cer","title":"convert Binary CER file to\u00a0 *.PEM file which is ASCII file"},{"location":"certificate/#convert-from-base64-to-binary","text":"certutil -decode filename.cer newfilename.cer","title":"Convert from Base64 to Binary"},{"location":"chocolatey/","text":"Chocolatey ([[SMB]]) ([[certutil]]) ([[tools/certutil|certutil]]) ([[linux]]) certificate Chocolatey is a machine-level, command-line package manager and installer for Windows software. Project Homepage: Chocolatey Homepage Installation Check the Execution Policy Run Get-ExecutionPolicy . If it returns Restricted , then run Set-ExecutionPolicy AllSigned or Set-ExecutionPolicy Bypass -Scope Process . Install Chocolatey Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) Check if you install chocolatey choco -? Install software package choco install <package>","title":"Chocolatey"},{"location":"chocolatey/#chocolatey","text":"([[SMB]]) ([[certutil]]) ([[tools/certutil|certutil]]) ([[linux]]) certificate Chocolatey is a machine-level, command-line package manager and installer for Windows software. Project Homepage: Chocolatey Homepage","title":"Chocolatey"},{"location":"chocolatey/#installation","text":"Check the Execution Policy Run Get-ExecutionPolicy . If it returns Restricted , then run Set-ExecutionPolicy AllSigned or Set-ExecutionPolicy Bypass -Scope Process . Install Chocolatey Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) Check if you install chocolatey choco -?","title":"Installation"},{"location":"chocolatey/#install-software-package","text":"choco install <package>","title":"Install software package"},{"location":"isilon/","text":"isilon (powerscale) #list information for all nodes in the cluster isi_for_array -s isi_hw_status -i #list nodes serial number: isi_for_array -s isi_hw_status -i | grep SerNo #get the Software ID (SWID) of the cluster isi license list | grep -i \"OneFS license\" #list drives that NOT healthy isi_for_array 'isi devices drive list|grep -v \"HEALTH\\|L3\\|EMPTY\"'|grep Bay #list drives status for node 30 isi_for_array -n30 'isi devices drive list' #suspend sled B so disk can be replaced for node 30 isi_for_array -n30 'isi devices drive suspend --sled=B --force' #list drives status for node 22 isi_for_array -n22 'isi devices list' #version of OneFS isi version --format=list #contact details isi cluster contact view #view esrs details isi esrs view #shutdown cluster\\node isi cluster shutdown --node-lnn=NodeNumber\\All #OR isi config shutdown #list IB status isi_for_array -s 'ibstat|grep State' #find drive that requires replacement isi_for_array 'isi device drive list|grep REPLACE' #list HW of the node isi_hw_status #list HW status for the cluster isi_for_array isi_hw_status #Returns the product number of each node isi_for_array 'isi_hw_status | grep Product' #Checking usage isi quota quotas list | grep -i <sharename> du -Ash <sharename> #List Authentication provider isi_for_array -s 'isi auth status'|grep <Domain Name>|cut -c55-|sort|uniq -c #Enable/Disable synciqjobs isi sync policies list isi sync policies <enable\\disable> --all isi sync policies list list devices & adding to the cluster # Once nodes are labelled & plugged in isi devices node list isi device node add <SERIAL NUMBER> #SR of the nodes are labelled correctly. #Monitor join process: isi status -q Replace isilon drive #Login to the affected Node on which you facing the issue whilere placing drive . ssh node #show the unhealthy drive bay isi_for_array 'isi devices drive list|grep -v \"HEALTH\\|L3\\|EMPTY\"'|grep Bay # Manually suspend the SLED # isi devices drive suspend --sled=<affected sled > # Verify the sled is suspended and drives are unmounted tail -f /var/log/isi_drive_d.log # Verify drives Sled / drives are Suspended isi devices drive list #Once the drive is replaced and the sled is re-seated, add the Sledback using below command . isi devices drive add --sled=<affected sled > # Check the drive status isi devices drive list # if the disk is used\\old, should require formatting isi devices drive format --node-lnn=<Node_Number> --bay=<Bay_Number> # After issuing upgrade command & not sure if there is any progress activties isi upgrade cluster nodes firmware progress list /VAR file system was less than 500MB Reduce message log file to increase /var to >500mb by using newsyslog command which maintain system log files to manageable sizes. # newsyslog: Rotated log file /var/log/messages newsyslog -F /var/log/messages # then delete big old isi_tardis_d.log.<nn>.gz files Change share permissions from Write\\Read to Read only ssh #Check domain users permission to TBM share: isi smb shares permission view <shareName> --group=\"DomainName\\Domain Users\" ##Change TBM smb share to read only for domain users: isi smb shares permission modify <shareName> --group=\"DomainName\\Domain Users\" --permission=read --permission-type=allow ##And check permissions afterwards: isi smb shares permission view <shareName> --group=\"DomainName\\Domain Users\" SmartFail a node isi status -q isi job jobs list isi devices node smartfail --node-lnn=<Node Name> isi job jobs list isi jon jobs view <Job Number>","title":"isilon (powerscale)"},{"location":"isilon/#isilon-powerscale","text":"#list information for all nodes in the cluster isi_for_array -s isi_hw_status -i #list nodes serial number: isi_for_array -s isi_hw_status -i | grep SerNo #get the Software ID (SWID) of the cluster isi license list | grep -i \"OneFS license\" #list drives that NOT healthy isi_for_array 'isi devices drive list|grep -v \"HEALTH\\|L3\\|EMPTY\"'|grep Bay #list drives status for node 30 isi_for_array -n30 'isi devices drive list' #suspend sled B so disk can be replaced for node 30 isi_for_array -n30 'isi devices drive suspend --sled=B --force' #list drives status for node 22 isi_for_array -n22 'isi devices list' #version of OneFS isi version --format=list #contact details isi cluster contact view #view esrs details isi esrs view #shutdown cluster\\node isi cluster shutdown --node-lnn=NodeNumber\\All #OR isi config shutdown #list IB status isi_for_array -s 'ibstat|grep State' #find drive that requires replacement isi_for_array 'isi device drive list|grep REPLACE' #list HW of the node isi_hw_status #list HW status for the cluster isi_for_array isi_hw_status #Returns the product number of each node isi_for_array 'isi_hw_status | grep Product' #Checking usage isi quota quotas list | grep -i <sharename> du -Ash <sharename> #List Authentication provider isi_for_array -s 'isi auth status'|grep <Domain Name>|cut -c55-|sort|uniq -c #Enable/Disable synciqjobs isi sync policies list isi sync policies <enable\\disable> --all isi sync policies list","title":"isilon (powerscale)"},{"location":"isilon/#list-devices-adding-to-the-cluster","text":"# Once nodes are labelled & plugged in isi devices node list isi device node add <SERIAL NUMBER> #SR of the nodes are labelled correctly. #Monitor join process: isi status -q","title":"list devices &amp; adding to the cluster"},{"location":"isilon/#replace-isilon-drive","text":"#Login to the affected Node on which you facing the issue whilere placing drive . ssh node #show the unhealthy drive bay isi_for_array 'isi devices drive list|grep -v \"HEALTH\\|L3\\|EMPTY\"'|grep Bay # Manually suspend the SLED # isi devices drive suspend --sled=<affected sled > # Verify the sled is suspended and drives are unmounted tail -f /var/log/isi_drive_d.log # Verify drives Sled / drives are Suspended isi devices drive list #Once the drive is replaced and the sled is re-seated, add the Sledback using below command . isi devices drive add --sled=<affected sled > # Check the drive status isi devices drive list # if the disk is used\\old, should require formatting isi devices drive format --node-lnn=<Node_Number> --bay=<Bay_Number> # After issuing upgrade command & not sure if there is any progress activties isi upgrade cluster nodes firmware progress list","title":"Replace isilon drive"},{"location":"isilon/#var-file-system-was-less-than-500mb","text":"Reduce message log file to increase /var to >500mb by using newsyslog command which maintain system log files to manageable sizes. # newsyslog: Rotated log file /var/log/messages newsyslog -F /var/log/messages # then delete big old isi_tardis_d.log.<nn>.gz files","title":"/VAR file system was less than 500MB"},{"location":"isilon/#change-share-permissions-from-writeread-to-read-only","text":"ssh #Check domain users permission to TBM share: isi smb shares permission view <shareName> --group=\"DomainName\\Domain Users\" ##Change TBM smb share to read only for domain users: isi smb shares permission modify <shareName> --group=\"DomainName\\Domain Users\" --permission=read --permission-type=allow ##And check permissions afterwards: isi smb shares permission view <shareName> --group=\"DomainName\\Domain Users\"","title":"Change share permissions from Write\\Read to Read only"},{"location":"isilon/#smartfail-a-node","text":"isi status -q isi job jobs list isi devices node smartfail --node-lnn=<Node Name> isi job jobs list isi jon jobs view <Job Number>","title":"SmartFail  a node"},{"location":"mkdocs/","text":"Requirements Python editor (vscode) github account Create a repo on Github give a name public Create README.md file ignore python general licence On computer sudo apt install python3.10-venv #If python envvironment not installed git clone git@github.com:Gobiman/mkdocs-material.git # clone the github repo created above git clone git@github.com:Gobiman/mkdocs-material.git # clone the github repo created above cd <folder> python3 -m venv venv #create python environment source venv/bin/activate # activate the environment pip --version pip install --upgrade pip #upgrade pip if required pip3 install mkdocs code . #Open in VScode or any editor mkdocs new . #will create mkdocs (mkdocs.yaml & docs\\index.md) mkdocs serve #build and test the site on your machine mkdocs gh-deploy --force # deploys to gh-pages branch, e.g. site \"https://gobiman.github.io/door/\" git add . git commit -m \"some informations\" git push origin main deactivate # deactivate the enviornment once development is done","title":"Mkdocs"},{"location":"mkdocs/#requirements","text":"Python editor (vscode) github account","title":"Requirements"},{"location":"mkdocs/#create-a-repo-on-github","text":"give a name public Create README.md file ignore python general licence","title":"Create a repo on Github"},{"location":"mkdocs/#on-computer","text":"sudo apt install python3.10-venv #If python envvironment not installed git clone git@github.com:Gobiman/mkdocs-material.git # clone the github repo created above git clone git@github.com:Gobiman/mkdocs-material.git # clone the github repo created above cd <folder> python3 -m venv venv #create python environment source venv/bin/activate # activate the environment pip --version pip install --upgrade pip #upgrade pip if required pip3 install mkdocs code . #Open in VScode or any editor mkdocs new . #will create mkdocs (mkdocs.yaml & docs\\index.md) mkdocs serve #build and test the site on your machine mkdocs gh-deploy --force # deploys to gh-pages branch, e.g. site \"https://gobiman.github.io/door/\" git add . git commit -m \"some informations\" git push origin main deactivate # deactivate the enviornment once development is done","title":"On computer"},{"location":"openssh/","text":"openssh # remove Entry from the Known-Hosts File ssh-keygen -R hostname Using the SSH Config File If you are regularly connecting to multiple remote systems over SSH, you can configure your remote servers with the .ssh/config file. Example: * Host dev HostName dev.your-domain User xcad Port 7654 IdentityFile ~/.ssh/targaryen.key Host * User root Compression yes Connect to a host (like dev , eg.) with ssh dev .","title":"openssh"},{"location":"openssh/#openssh","text":"# remove Entry from the Known-Hosts File ssh-keygen -R hostname","title":"openssh"},{"location":"openssh/#using-the-ssh-config-file","text":"If you are regularly connecting to multiple remote systems over SSH, you can configure your remote servers with the .ssh/config file. Example: * Host dev HostName dev.your-domain User xcad Port 7654 IdentityFile ~/.ssh/targaryen.key Host * User root Compression yes Connect to a host (like dev , eg.) with ssh dev .","title":"Using the SSH Config File"},{"location":"openssl/","text":"openssl openssl command makes is easier to manipulate certificates. OpenSSL site DER encoded binary X.509(.CER) is called D istinguished E ncoding R ules which is a binary format. Base64 which is an encoding method that converts binary data to plain ASCII text. The .CER extension is interchangeable with .CRT Sometimes, DER certificate have *.der extension Base64 have *.pem extension Open in text editor DER gibberish Base64 ASCII code openssl to extraxt certificate file & private key from PFX file Make PFX file from install certificate on Windows system copy it to Linux machine Create the cert file sudo openssl pkcs12 -in <pfx_filename.pfx> -out certificate.crt -nokeys creates private key sudo openssl pkcs12 -in certificate.p12 -out privateKey.key -nodes -nocertsopenssl pkcs12 -in certificate.p12 -out privateKey.key -nodes -nocerts https://sslhow.com/openssl-pkcs12 Another method, extracting Certificate & keys extract private key (Encrypted) sudo openssl pkcs12 -in <pfx_filename.pfx> -nocerts -out <keyfilename-encrypted.key> - Extract certificate from pfx file sudo openssl pkcs12 -in pfx_filename.pfx -clcerts -nokeys -out <certifcate_file_name>.crt Extract private Unencrypted format from Encrypted private key file sudo openssl rsa -in keyfilename-encrypted.key -out keyfilename-decrypted.key https://bobcares.com/blog/convert-pfx-to-crt-key-files/ Convert using openssl command If the certificate file Base64 (.cer extension) which is PEM format sudo openssl x509 -inform PEM -in BASE64_cert.cer -out NEW_Cert_File_Name.crt If the certificate file in DER format (.cer extension) sudo openssl x509 -inform DER -in DER_cert.cer -out NEW_Cert_File_Name.crt Check client TLS version and certificate with openssl openssl s_client -connect bbc.co.uk:443 echo | openssl s_client -connect bbc.co.uk:443 2>/dev/null | openssl x509 -noout -dates #listing dates echo | openssl s_client -connect bbc.co.uk:443 2>/dev/null | openssl x509 -text -noout | grep \"Public-Key\" #extract public key size","title":"openssl"},{"location":"openssl/#openssl","text":"openssl command makes is easier to manipulate certificates. OpenSSL site DER encoded binary X.509(.CER) is called D istinguished E ncoding R ules which is a binary format. Base64 which is an encoding method that converts binary data to plain ASCII text. The .CER extension is interchangeable with .CRT Sometimes, DER certificate have *.der extension Base64 have *.pem extension Open in text editor DER gibberish Base64 ASCII code","title":"openssl"},{"location":"openssl/#openssl-to-extraxt-certificate-file-private-key-from-pfx-file","text":"Make PFX file from install certificate on Windows system copy it to Linux machine Create the cert file sudo openssl pkcs12 -in <pfx_filename.pfx> -out certificate.crt -nokeys creates private key sudo openssl pkcs12 -in certificate.p12 -out privateKey.key -nodes -nocertsopenssl pkcs12 -in certificate.p12 -out privateKey.key -nodes -nocerts https://sslhow.com/openssl-pkcs12","title":"openssl to extraxt certificate file &amp; private key from PFX file"},{"location":"openssl/#another-method-extracting-certificate-keys","text":"extract private key (Encrypted) sudo openssl pkcs12 -in <pfx_filename.pfx> -nocerts -out <keyfilename-encrypted.key> - Extract certificate from pfx file sudo openssl pkcs12 -in pfx_filename.pfx -clcerts -nokeys -out <certifcate_file_name>.crt Extract private Unencrypted format from Encrypted private key file sudo openssl rsa -in keyfilename-encrypted.key -out keyfilename-decrypted.key https://bobcares.com/blog/convert-pfx-to-crt-key-files/","title":"Another method, extracting Certificate &amp; keys"},{"location":"openssl/#convert-using-openssl-command","text":"","title":"Convert using openssl command"},{"location":"openssl/#if-the-certificate-file-base64-cer-extension-which-is-pem-format","text":"sudo openssl x509 -inform PEM -in BASE64_cert.cer -out NEW_Cert_File_Name.crt","title":"If the certificate file Base64 (.cer extension) which is PEM format"},{"location":"openssl/#if-the-certificate-file-in-der-format-cer-extension","text":"sudo openssl x509 -inform DER -in DER_cert.cer -out NEW_Cert_File_Name.crt","title":"If the certificate file in DER format (.cer extension)"},{"location":"openssl/#check-client-tls-version-and-certificate-with-openssl","text":"openssl s_client -connect bbc.co.uk:443 echo | openssl s_client -connect bbc.co.uk:443 2>/dev/null | openssl x509 -noout -dates #listing dates echo | openssl s_client -connect bbc.co.uk:443 2>/dev/null | openssl x509 -text -noout | grep \"Public-Key\" #extract public key size","title":"Check client TLS version and certificate with openssl"},{"location":"powershell/","text":"PowerShell Cheat-Sheet PowerShell is a task automation and configuration management program from Microsoft, consisting of a command-line shell and the associated scripting language. Install PowerShell PowerShell was made open-source and cross-platform with PowerShell Core, and can be installed on multiple operating systems. Windows Download MSI Package from the Official PowerShell Docs Set up PowerShell Profile in Windows Terminal ([[windows-terminal]]). \"commandline\": \"pwsh.exe -nologo\", \"name\": \"Powershell\", \"source\": \"Windows.Terminal.PowershellCore\" Linux (Ubuntu) # Update the list of packages sudo apt-get update # Install pre-requisite packages. sudo apt-get install -y wget apt-transport-https software-properties-common # Download the Microsoft repository GPG keys wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb # Register the Microsoft repository GPG keys sudo dpkg -i packages-microsoft-prod.deb # Update the list of packages after we added packages.microsoft.com sudo apt-get update # Install PowerShell sudo apt-get install -y powershell # Start PowerShell pwsh Profile Set up a PowerShell Profile by opening the profile script : code $PROFILE (Optional) Set up starship Prompt You can customise the look and feel of PowerShell with the Starship Prompt ([[starship]]). Run PowerShell script under python ## use powershell script in Python import subprocess def run_powershell_script(script_path): completed_process = subprocess.run([\"powershell\", \"-File\", script_path], capture_output=True) return completed_process ##using the decode method to decode the returned message str = \"this is string example....wow!!!\"; str = str.encode('utf-8', 'strict'); print (\"Encoded String: \", str) str = str.decode('utf-8', 'strict') print (\"Decoded String: \", str) PowerShell hashtable https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-5.1 See my About page for details. At the same time you could see certificate","title":"PowerShell Cheat-Sheet"},{"location":"powershell/#powershell-cheat-sheet","text":"PowerShell is a task automation and configuration management program from Microsoft, consisting of a command-line shell and the associated scripting language.","title":"PowerShell Cheat-Sheet"},{"location":"powershell/#install-powershell","text":"PowerShell was made open-source and cross-platform with PowerShell Core, and can be installed on multiple operating systems.","title":"Install PowerShell"},{"location":"powershell/#windows","text":"Download MSI Package from the Official PowerShell Docs Set up PowerShell Profile in Windows Terminal ([[windows-terminal]]). \"commandline\": \"pwsh.exe -nologo\", \"name\": \"Powershell\", \"source\": \"Windows.Terminal.PowershellCore\"","title":"Windows"},{"location":"powershell/#linux-ubuntu","text":"# Update the list of packages sudo apt-get update # Install pre-requisite packages. sudo apt-get install -y wget apt-transport-https software-properties-common # Download the Microsoft repository GPG keys wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb # Register the Microsoft repository GPG keys sudo dpkg -i packages-microsoft-prod.deb # Update the list of packages after we added packages.microsoft.com sudo apt-get update # Install PowerShell sudo apt-get install -y powershell # Start PowerShell pwsh","title":"Linux (Ubuntu)"},{"location":"powershell/#profile","text":"Set up a PowerShell Profile by opening the profile script : code $PROFILE","title":"Profile"},{"location":"powershell/#optional-set-up-starship-prompt","text":"You can customise the look and feel of PowerShell with the Starship Prompt ([[starship]]).","title":"(Optional) Set up starship Prompt"},{"location":"powershell/#run-powershell-script-under-python","text":"## use powershell script in Python import subprocess def run_powershell_script(script_path): completed_process = subprocess.run([\"powershell\", \"-File\", script_path], capture_output=True) return completed_process ##using the decode method to decode the returned message str = \"this is string example....wow!!!\"; str = str.encode('utf-8', 'strict'); print (\"Encoded String: \", str) str = str.decode('utf-8', 'strict') print (\"Decoded String: \", str)","title":"Run PowerShell script under python"},{"location":"powershell/#powershell-hashtable","text":"https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-5.1 See my About page for details. At the same time you could see certificate","title":"PowerShell hashtable"}]}