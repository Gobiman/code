{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>Get-Service\n</code></pre> <pre><code>Get-Service\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"about/#the-cat-sat-on-the-mat-again","title":"the cat sat on the mat again","text":""},{"location":"certificate/","title":"certificate","text":"<p>SSL certificates are X.509 Certificates</p> <p>X.509 certificates are PKI-based certificates which works on the public key and private key infrastructure. </p> <p>certificates with extension .cer or .crt are the same. .cer and .cet extension are encoded in DER format or we can say they encoded with ASCII PEM format.</p> <p>DER formatted certificates are binary, therefore you can't see exactly what is written in those certificates you cannot as they are of the form 0s and 1s.</p> <p>Certificates that comes with .cer and .cet extensions are base 64 coded</p> <p>see openssl for certificate conversation</p>"},{"location":"certificate/#ms-adcs-services-training","title":"MS, ADCS services training","text":""},{"location":"certificate/#configure-windows-certificate-servers-setting-up-a-crl","title":"Configure windows certificate servers - setting up a CRL","text":"<p>Configure Windows Certificate Services - Setting up a CRL  it explains why and how to setup CRL (Certificate Revocation List) </p>"},{"location":"certificate/#list-of-technical-terminology-and-disambiguation","title":"list of Technical Terminology and Disambiguation","text":"<p>CRL= Certificate Revocation List: Is a list published by a\u00a0CA\u00a0for certificates that have been cancelled or revoked.  OCSP protocol = Online Certificate Status Protocol: Used by a\u00a0CA\u00a0to answer certificate revocation requests.</p>"},{"location":"certificate/#open-cert-manager-for-the-local-machine","title":"open cert manager for the local machine","text":"<pre><code>certlm\n</code></pre>"},{"location":"certificate/#request-convert-certificate-extract-keys","title":"Request, convert certificate &amp; extract keys","text":"<pre><code>#list template from CA\ncertutil -dump | sls 'config:' # dump CA config\ncertutil -CATemplates -config &lt;CA Enterprise machine&gt;\n\n</code></pre> <pre><code>certutil -addstore -f \"ROOT\" new-root-certificate.crt\ncertutil -delstore \"ROOT\" serial-number-hex\n</code></pre> <p>In some remote access scenarios it is not possible to copy binary data (such as files) but you can copy\\transfer plain text, Base64 is a better choice.</p>"},{"location":"certificate/#convert-binary-pfx-file-to-base64-cer-with-powershell","title":"convert binary (pfx) file to Base64 (.cer) with powershell","text":"<pre><code>Get-PfxCertificate -FilePath F:\\Certs\\ServerCerts\\demosite.org.pfx | Export-Certificate -FilePath F:\\Certs\\ServerCerts\\demosite.cer -Type CERT\n</code></pre>"},{"location":"certificate/#convert-binary-cer-file-to-pem-file-which-is-ascii-file","title":"convert Binary CER file to\u00a0 *.PEM file which is ASCII file","text":"<pre><code>certutil.exe -encode .\\demosite.cer demosite1.cer\ncertutil -encode filename.cer newfilename.cer\n</code></pre>"},{"location":"certificate/#convert-from-base64-to-binary","title":"Convert from Base64 to Binary","text":"<pre><code>certutil -decode filename.cer newfilename.cer\n</code></pre>"},{"location":"chocolatey/","title":"Chocolatey","text":"<p>([[SMB]]) ([[certutil]]) ([[tools/certutil|certutil]]) ([[linux]])</p> <p>certificate</p> <p>Chocolatey is a machine-level, command-line package manager and installer for Windows software.</p> <p>Project Homepage: Chocolatey Homepage</p>"},{"location":"chocolatey/#installation","title":"Installation","text":"<ol> <li>Check the Execution Policy</li> </ol> <p>Run\u00a0<code>Get-ExecutionPolicy</code>. If it returns\u00a0<code>Restricted</code>, then run\u00a0<code>Set-ExecutionPolicy AllSigned</code>\u00a0or\u00a0<code>Set-ExecutionPolicy Bypass -Scope Process</code>.</p> <ol> <li>Install Chocolatey</li> </ol> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> <ol> <li>Check if you install chocolatey</li> </ol> <pre><code>choco -?\n</code></pre>"},{"location":"chocolatey/#install-software-package","title":"Install software package","text":"<pre><code>choco install &lt;package&gt;\n</code></pre>"},{"location":"isilon/","title":"isilon (powerscale)","text":"<pre><code>#list information for all nodes in the cluster\nisi_for_array -s isi_hw_status -i\n</code></pre> <pre><code>#list nodes serial number:\u00a0 \u00a0 \u00a0\nisi_for_array -s isi_hw_status -i | grep SerNo\n</code></pre> <pre><code>#get the Software ID (SWID) of the cluster\nisi license list | grep -i \"OneFS license\"\n</code></pre> <pre><code>#list drives that NOT healthy\nisi_for_array 'isi devices drive list|grep -v \"HEALTH\\|L3\\|EMPTY\"'|grep Bay\n</code></pre> <pre><code>#list drives status for node 30\nisi_for_array -n30 'isi devices drive list'\n</code></pre> <pre><code>#suspend sled B so disk can be replaced  for node 30\nisi_for_array -n30 'isi devices drive suspend --sled=B --force' \n</code></pre> <pre><code>#list drives status for node 22\nisi_for_array -n22 'isi devices list'\n</code></pre> <pre><code>#version of OneFS\nisi version --format=list   \n</code></pre> <pre><code>#contact details \nisi cluster contact view    \n</code></pre> <pre><code>#view esrs details\nisi esrs view\n</code></pre> <pre><code>#shutdown cluster\\node\nisi cluster shutdown --node-lnn=NodeNumber\\All \n#OR\nisi config \nshutdown\n</code></pre> <pre><code>#list IB status\nisi_for_array -s 'ibstat|grep State'\n</code></pre> <pre><code>#find drive that requires replacement\nisi_for_array 'isi device drive list|grep REPLACE'\n</code></pre> <pre><code>#list HW of the node\nisi_hw_status \n#list HW status for the cluster\nisi_for_array isi_hw_status\n</code></pre> <pre><code>#Returns the product number of each node\nisi_for_array 'isi_hw_status | grep Product'\n</code></pre> <pre><code>#Checking usage\nisi quota quotas list | grep -i &lt;sharename&gt;\ndu -Ash &lt;sharename&gt;\n</code></pre> <pre><code>#List Authentication provider\nisi_for_array -s 'isi auth status'|grep &lt;Domain Name&gt;|cut -c55-|sort|uniq -c\n</code></pre> <pre><code>#Enable/Disable synciqjobs\nisi sync policies list\nisi sync policies &lt;enable\\disable&gt; --all\nisi sync policies list\n</code></pre>"},{"location":"isilon/#list-devices-adding-to-the-cluster","title":"list devices &amp; adding to the cluster","text":"<pre><code># Once nodes are labelled &amp; plugged in \nisi devices node list\nisi device node add &lt;SERIAL NUMBER&gt; #SR of the nodes are labelled correctly.\n#Monitor join process:\nisi status -q\n</code></pre>"},{"location":"isilon/#replace-isilon-drive","title":"Replace isilon drive","text":"<pre><code>#Login to the affected Node on which you facing the issue whilere placing drive .\nssh node\n</code></pre> <pre><code>#show the unhealthy drive bay\nisi_for_array 'isi devices drive list|grep -v \"HEALTH\\|L3\\|EMPTY\"'|grep Bay\n</code></pre> <pre><code># Manually suspend the SLED # \nisi devices drive suspend --sled=&lt;affected sled &gt;\n</code></pre> <pre><code># Verify the sled is suspended and drives are unmounted\ntail -f /var/log/isi_drive_d.log\n</code></pre> <pre><code># Verify drives Sled / drives are Suspended\nisi devices drive list\n</code></pre> <pre><code>#Once the drive is replaced and the sled is re-seated, add the Sledback using below command .\nisi devices drive add --sled=&lt;affected sled &gt; \n</code></pre> <pre><code># Check the drive status\nisi devices drive list\n</code></pre> <pre><code># if the disk is used\\old, should require formatting\nisi devices drive format --node-lnn=&lt;Node_Number&gt; --bay=&lt;Bay_Number&gt;\n</code></pre> <pre><code># After issuing upgrade command &amp; not sure if there is any progress activties \nisi upgrade cluster nodes firmware progress list\n</code></pre>"},{"location":"isilon/#var-file-system-was-less-than-500mb","title":"/VAR file system was less than 500MB","text":"<p>Reduce message log file to increase /var to &gt;500mb by using newsyslog command which maintain system log files to manageable sizes.</p> <pre><code># newsyslog: Rotated log file /var/log/messages\nnewsyslog -F /var/log/messages\n# then delete big old isi_tardis_d.log.&lt;nn&gt;.gz files\n</code></pre>"},{"location":"isilon/#change-share-permissions-from-writeread-to-read-only","title":"Change share permissions from Write\\Read to Read only","text":"<pre><code>ssh\n#Check domain users permission to TBM share:\nisi smb shares permission view &lt;shareName&gt; --group=\"DomainName\\Domain Users\"\n##Change TBM smb share to read only for domain users:\nisi smb shares permission modify &lt;shareName&gt; --group=\"DomainName\\Domain Users\" --permission=read --permission-type=allow\n##And check permissions afterwards:\nisi smb shares permission view &lt;shareName&gt; --group=\"DomainName\\Domain Users\"\n</code></pre>"},{"location":"isilon/#smartfail-a-node","title":"SmartFail  a node","text":"<pre><code>isi status -q\nisi job jobs list\nisi devices node smartfail --node-lnn=&lt;Node Name&gt;\nisi job jobs list\nisi jon jobs view &lt;Job Number&gt;\n</code></pre>"},{"location":"mkdocs/","title":"Mkdocs","text":""},{"location":"mkdocs/#requirements","title":"Requirements","text":"<ul> <li>Python</li> <li>editor (vscode)</li> <li>github account</li> <li>mkdocs material</li> </ul>"},{"location":"mkdocs/#create-a-repo-on-github","title":"Create a repo on Github","text":"<ul> <li>give a name</li> <li>public</li> <li>Create README.md file</li> <li>ignore python</li> <li>general licence</li> </ul>"},{"location":"mkdocs/#on-computer","title":"On computer","text":"<pre><code>sudo apt install python3.10-venv #If python envvironment not installed\ngit clone git@github.com:Gobiman/mkdocs-material.git  # clone the github repo created above\ngit clone git@github.com:Gobiman/mkdocs-material.git  # clone the github repo created above\ncd &lt;folder&gt;\npython3 -m venv venv  #create python environment\nsource venv/bin/activate # activate the environment\npip --version\npip install --upgrade pip  #upgrade pip if required\npip3 install mkdocs\ncode .  #Open in VScode or any editor \nmkdocs new .  #will create mkdocs (mkdocs.yaml &amp; docs\\index.md)\nmkdocs serve  #build and test the site on your machine\nmkdocs gh-deploy --force # deploys to gh-pages branch, e.g. site \"https://gobiman.github.io/door/\"\n</code></pre> <pre><code>git add .\ngit commit -m \"some informations\"\ngit push origin main\n</code></pre> <pre><code>deactivate  # deactivate the enviornment once development is done\n</code></pre>"},{"location":"openssh/","title":"openssh","text":"<pre><code># remove Entry from the Known-Hosts File\nssh-keygen -R hostname\n</code></pre>"},{"location":"openssh/#using-the-ssh-config-file","title":"Using the SSH Config File","text":"<p>If you are regularly connecting to multiple remote systems over SSH, you can configure your remote servers with the <code>.ssh/config</code> file.</p> <p>Example:*</p> <pre><code>Host dev\n    HostName dev.your-domain\n    User xcad\n    Port 7654\n    IdentityFile ~/.ssh/targaryen.key\n\nHost *\n    User root\n    Compression yes\n</code></pre> <p>Connect to a host (like dev , eg.) with <code>ssh dev</code>.</p>"},{"location":"openssl/","title":"openssl","text":"<p>openssl command makes is easier to manipulate certificates.</p> <p>OpenSSL site</p> <p>DER encoded binary X.509(.CER) is called Distinguished Encoding Rules which is a binary format. Base64 which is an encoding method that converts binary data to plain ASCII text.</p> <p>The .CER extension is interchangeable with .CRT</p> <p>Sometimes,</p> <ul> <li>DER certificate have *.der extension</li> <li>Base64 have *.pem extension</li> </ul> <p>Open in text editor</p> <ul> <li>DER gibberish</li> <li>Base64 ASCII code</li> </ul>"},{"location":"openssl/#openssl-to-extraxt-certificate-file-private-key-from-pfx-file","title":"openssl to extraxt certificate file &amp; private key from PFX file","text":"<ul> <li>Make PFX file from install certificate on Windows system</li> <li>copy it to Linux machine</li> <li>Create the cert file </li> </ul> <pre><code>sudo openssl pkcs12 -in &lt;pfx_filename.pfx&gt; -out certificate.crt -nokeys \n</code></pre> <ul> <li>creates private key</li> </ul> <pre><code>sudo openssl pkcs12 -in certificate.p12 -out privateKey.key -nodes -nocertsopenssl pkcs12 -in certificate.p12 -out privateKey.key -nodes -nocerts\n</code></pre> <p>https://sslhow.com/openssl-pkcs12</p>"},{"location":"openssl/#another-method-extracting-certificate-keys","title":"Another method, extracting Certificate &amp; keys","text":"<ul> <li>extract private key (Encrypted)</li> </ul> <pre><code>sudo openssl pkcs12 -in &lt;pfx_filename.pfx&gt; -nocerts -out &lt;keyfilename-encrypted.key&gt;\n</code></pre> <p>- Extract certificate from pfx file</p> <pre><code>sudo openssl pkcs12 -in pfx_filename.pfx -clcerts -nokeys -out &lt;certifcate_file_name&gt;.crt\n</code></pre> <ul> <li>Extract private Unencrypted format from Encrypted private key file</li> </ul> <pre><code>sudo openssl rsa -in keyfilename-encrypted.key -out keyfilename-decrypted.key\n</code></pre> <p>https://bobcares.com/blog/convert-pfx-to-crt-key-files/</p>"},{"location":"openssl/#convert-using-openssl-command","title":"Convert using openssl command","text":""},{"location":"openssl/#if-the-certificate-file-base64-cer-extension-which-is-pem-format","title":"If the certificate file Base64 (.cer extension) which is PEM format","text":"<pre><code>sudo openssl x509 -inform PEM -in BASE64_cert.cer -out NEW_Cert_File_Name.crt\n</code></pre>"},{"location":"openssl/#if-the-certificate-file-in-der-format-cer-extension","title":"If the certificate file in DER format (.cer extension)","text":"<pre><code>sudo openssl x509 -inform DER -in DER_cert.cer -out NEW_Cert_File_Name.crt\n</code></pre>"},{"location":"openssl/#check-client-tls-version-and-certificate-with-openssl","title":"Check client TLS version and certificate with openssl","text":"<pre><code>openssl s_client -connect bbc.co.uk:443\necho | openssl s_client -connect bbc.co.uk:443 2&gt;/dev/null | openssl x509 -noout -dates #listing dates\necho | openssl s_client -connect bbc.co.uk:443 2&gt;/dev/null | openssl x509 -text -noout | grep \"Public-Key\" #extract public key size\n</code></pre>"},{"location":"powershell/","title":"PowerShell Cheat-Sheet","text":"<p>PowerShell is a task automation and configuration management program from Microsoft, consisting of a command-line shell and the associated scripting language.</p>"},{"location":"powershell/#install-powershell","title":"Install PowerShell","text":"<p>PowerShell was made open-source and cross-platform with PowerShell Core, and can be installed on multiple operating systems.</p>"},{"location":"powershell/#windows","title":"Windows","text":"<ol> <li>Download MSI Package from the Official PowerShell Docs</li> <li>Set up PowerShell Profile in Windows Terminal ([[windows-terminal]]).</li> </ol> <pre><code>\"commandline\": \"pwsh.exe -nologo\",\n\"name\": \"Powershell\",\n\"source\": \"Windows.Terminal.PowershellCore\"\n</code></pre>"},{"location":"powershell/#linux-ubuntu","title":"Linux (Ubuntu)","text":"<pre><code># Update the list of packages\n    sudo apt-get update\n# Install pre-requisite packages.\n    sudo apt-get install -y wget apt-transport-https software-properties-common\n# Download the Microsoft repository GPG keys\n    wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb\n# Register the Microsoft repository GPG keys\n    sudo dpkg -i packages-microsoft-prod.deb\n# Update the list of packages after we added packages.microsoft.com\n    sudo apt-get update\n# Install PowerShell\n    sudo apt-get install -y powershell\n# Start PowerShell\n    pwsh\n</code></pre>"},{"location":"powershell/#profile","title":"Profile","text":"<p>Set up a PowerShell Profile by opening the profile script :</p> <pre><code>code $PROFILE\n</code></pre>"},{"location":"powershell/#optional-set-up-starship-prompt","title":"(Optional) Set up starship Prompt","text":"<p>You can customise the look and feel of PowerShell with the Starship Prompt ([[starship]]).</p>"},{"location":"powershell/#run-powershell-script-under-python","title":"Run PowerShell script under python","text":"<pre><code>## use powershell script in Python\nimport subprocess\n\ndef run_powershell_script(script_path):\n    completed_process = subprocess.run([\"powershell\", \"-File\", script_path], capture_output=True)\n    return completed_process\n\n##using the decode method to decode the returned message\nstr = \"this is string example....wow!!!\";\nstr = str.encode('utf-8', 'strict');\nprint (\"Encoded String: \", str)\nstr = str.decode('utf-8', 'strict')\nprint (\"Decoded String: \", str)\n</code></pre>"},{"location":"powershell/#powershell-hashtable","title":"PowerShell hashtable","text":"<p>https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-5.1</p> <p>See my About page for details.</p> <p>At the same time you could see certificate</p> <p> </p>"}]}